#!/bin/sh

PROJECT="$(php -r "echo dirname(dirname(dirname(realpath('$0'))));")"
STAGED_FILES_CMD="$(git diff --cached --name-only --diff-filter=ACMR HEAD | grep "\/custom\/" | grep "\\.install\|\\.module\|\\.inc\|\\.php\|\\.yml\|\\.js")"
BASH_FILES_CMD="$(git diff --cached --name-only --diff-filter=ACMR HEAD | grep "scripts\/" | grep "\\.sh$")"

# Determine if a file list is passed
if [ "$#" -eq 1 ]
then
  oIFS=$IFS
  IFS='
  '
  SFILES="$1"
  IFS=$oIFS
fi
SFILES=${SFILES:-$STAGED_FILES_CMD}

echo "Checking PHP Lint..."
for FILE in $SFILES
do
  php -l -d display_errors=0 "$PROJECT"/"$FILE"
  EXIT_CODE=$?
  if [ $EXIT_CODE != 0 ]
  then
    echo "Fix the error before commit."
    exit 1
  fi
  FILES="$FILES $PROJECT/$FILE"
done

if [ "$FILES" != "" ]
then
  echo "Running Code Sniffer...(omits warnings)"
  "$PROJECT/bin/phpcs" --standard=Drupal --encoding=utf-8 -p $FILES
  EXIT_CODE=$?
  if [ $EXIT_CODE != 0 ]
  then
    echo "Fix the error before commit."
    exit 1
  fi

  echo "Running CS Drupal Best Practices...(includes warnings)"
  "$PROJECT/bin/phpcs" --standard=DrupalPractice --encoding=utf-8 -p $FILES
  EXIT_CODE=$?
  if [ $EXIT_CODE != 0 ]
  then
    echo "Fix the error before commit."
    exit 1
  fi
fi

if [ "$BASH_FILES_CMD" != "" ];
then
    hash shellcheck 2>/dev/null || { echo >&2 "The ShellCheck tool isn't installed. Skipping!"; exit 0; }
    echo "Running ShellCheck analysis tool...(includes warnings and suggestions)"
    shellcheck -a $BASH_FILES_CMD
    EXIT_CODE=$?
    if [ $EXIT_CODE != 0 ]; 
    then
        echo "Fix the error(s) before commit."
        exit 1
    fi
fi

exit $?
